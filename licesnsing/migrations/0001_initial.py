# Generated by Django 5.1.5 on 2025-02-11 10:29

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ar_name", models.CharField(max_length=250, unique=True)),
                ("en_name", models.CharField(blank=True, max_length=250, null=True)),
                ("code", models.CharField(max_length=250, unique=True)),
            ],
            options={
                "verbose_name": "Activity",
                "verbose_name_plural": "Activities",
            },
        ),
        migrations.CreateModel(
            name="ArduinoReader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Unique RFID code scanned by the Arduino",
                        max_length=15,
                    ),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        default=datetime.datetime(
                            2025, 2, 11, 10, 29, 8, 596274, tzinfo=datetime.timezone.utc
                        ),
                        editable=False,
                        help_text="Timestamp when the RFID entry was created",
                    ),
                ),
                (
                    "queried",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the RFID entry has been processed",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        blank=True,
                        help_text="Optional ID of the Arduino device that sent this data",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processed", "Processed"),
                            ("error", "Error"),
                        ],
                        default="pending",
                        help_text="Processing status of the RFID data",
                        max_length=10,
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the record was last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Arduino RFID Entry",
                "verbose_name_plural": "Arduino RFID Entries",
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="EstablishmentRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ar_name", models.CharField(max_length=250, unique=True)),
                ("en_name", models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                "verbose_name": "Establishment Role",
                "verbose_name_plural": "Establishment Roles",
            },
        ),
        migrations.CreateModel(
            name="MainCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ar_name", models.CharField(max_length=250, unique=True)),
                ("en_name", models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                "verbose_name": "Main Category",
                "verbose_name_plural": "Main Categories",
            },
        ),
        migrations.CreateModel(
            name="SubCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ar_name", models.CharField(max_length=250, unique=True)),
                ("en_name", models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                "verbose_name": "Sub Category",
                "verbose_name_plural": "Sub Categories",
            },
        ),
        migrations.CreateModel(
            name="Establishment",
            fields=[
                (
                    "rifd",
                    models.CharField(
                        max_length=100, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("establishment_name", models.CharField(max_length=200)),
                ("owner_name", models.CharField(max_length=200)),
                ("owner_number", models.CharField(max_length=50)),
                ("director_name", models.CharField(max_length=200)),
                ("director_number", models.CharField(max_length=50)),
                ("representative_name", models.CharField(max_length=200)),
                ("representative_number", models.CharField(max_length=200)),
                ("box_O_P", models.BigIntegerField()),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("phone_number", models.CharField(max_length=50)),
                ("municipality_name", models.CharField(max_length=200)),
                ("region_number", models.CharField(max_length=50)),
                ("street_number", models.BigIntegerField()),
                ("street_name", models.CharField(max_length=200)),
                ("building_number", models.BigIntegerField()),
                ("block_number", models.BigIntegerField()),
                ("block_name", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.activity",
                    ),
                ),
                (
                    "main_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.maincategory",
                    ),
                ),
                (
                    "sub_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.subcategory",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EstablishmentRegister",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "issuance_date",
                    models.DateField(
                        help_text="The date when the car license was issued."
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        help_text="The date when the car license expires."
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the registration record was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the registration record was last updated.",
                    ),
                ),
                (
                    "establishment",
                    models.ForeignKey(
                        help_text="The establishment issuing this car license registration.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registers",
                        to="licesnsing.establishment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Establishment Register",
                "verbose_name_plural": "Establishment Registers",
                "ordering": ["-issuance_date"],
            },
        ),
        migrations.CreateModel(
            name="Inspection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "register_number",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Register Number"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, null=True, verbose_name="Inspection Notes"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        max_digits=9,
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "status",
                    models.BooleanField(
                        choices=[(True, "Accepted"), (False, "Refused")],
                        default=False,
                        verbose_name="Inspection Status",
                    ),
                ),
                (
                    "register_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="inspections/register_photos/"
                    ),
                ),
                (
                    "license_photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="inspections/license_photos/"
                    ),
                ),
                (
                    "establishment_photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="inspections/establishment_photos/",
                    ),
                ),
                (
                    "cars_building_photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="inspections/cars_building_photos/",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date and Time of Inspection"
                    ),
                ),
                (
                    "inspector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inspections",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Inspector",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EstablishmentLicence",
            fields=[
                (
                    "number",
                    models.AutoField(
                        help_text="Auto-incrementing primary key representing the licence number.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "creation_date",
                    models.DateField(
                        help_text="The date when the licence was created."
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(help_text="The date when the licence expires."),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the licence record was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the licence record was last updated.",
                    ),
                ),
                (
                    "activity",
                    models.ForeignKey(
                        help_text="Reference to the activity associated with this licence.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.activity",
                    ),
                ),
                (
                    "register",
                    models.ForeignKey(
                        help_text="Reference to the registration record associated with this licence.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="licences",
                        to="licesnsing.establishmentregister",
                    ),
                ),
                (
                    "main_category",
                    models.ForeignKey(
                        help_text="Reference to the main category associated with this licence.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.maincategory",
                    ),
                ),
                (
                    "sub_category",
                    models.ForeignKey(
                        help_text="Reference to the sub category associated with this licence.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="licesnsing.subcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Establishment Licence",
                "verbose_name_plural": "Establishment Licences",
                "ordering": ["-creation_date"],
            },
        ),
    ]
